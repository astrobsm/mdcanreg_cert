FROM python:3.11-slim

WORKDIR /app

# Install essential system dependencies and runtime libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    # PostgreSQL dependencies
    libpq-dev \
    libpq5 \
    postgresql-client \
    # Build dependencies
    gcc \
    g++ \
    python3-dev \
    build-essential \
    pkg-config \
    # Runtime libraries
    libc6-dev \
    libssl-dev \
    libffi-dev \
    zlib1g-dev \
    # System utilities
    curl \
    wget \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .

# Install Python dependencies with proper handling of binary packages
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    # Install packages that might need compilation from source
    pip install --no-cache-dir psycopg2-binary && \
    # Install remaining dependencies
    pip install --no-cache-dir -r requirements.txt && \
    # Verify installation
    python -c "import flask, flask_sqlalchemy, psycopg2, gunicorn; print('âœ… All dependencies installed successfully')"

# Copy application files
COPY . .

# Make scripts executable
RUN chmod +x startup_check.sh

# Set environment variables
ENV PYTHONPATH="/app:/app/backend"
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=production
ENV PORT=8080
ENV PYTHONDONTWRITEBYTECODE=1

# Create a working wkhtmltopdf stub (since PDF generation is optional)
RUN echo '#!/bin/bash' > /usr/local/bin/wkhtmltopdf && \
    echo 'echo "PDF generation is disabled in this container"' >> /usr/local/bin/wkhtmltopdf && \
    echo 'exit 1' >> /usr/local/bin/wkhtmltopdf && \
    chmod +x /usr/local/bin/wkhtmltopdf

# Build frontend directory structure
RUN mkdir -p frontend/build/static && \
    echo '<!DOCTYPE html>' > frontend/build/index.html && \
    echo '<html lang="en">' >> frontend/build/index.html && \
    echo '<head><meta charset="utf-8"><title>MDCAN BDM 2025</title></head>' >> frontend/build/index.html && \
    echo '<body><h1>MDCAN BDM 2025 Certificate Platform</h1><p>Loading...</p></body>' >> frontend/build/index.html && \
    echo '</html>' >> frontend/build/index.html

# Verify build configuration
RUN echo "ðŸ”§ Build Verification:" && \
    echo "  - Python: $(python --version)" && \
    echo "  - Dependencies: $(pip list | wc -l) packages installed" && \
    echo "  - Environment: ${FLASK_ENV}" && \
    echo "  - Port: ${PORT}"

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=5 \
    CMD curl -f http://localhost:${PORT:-8080}/health || exit 1

# Start with comprehensive checks
CMD ["sh", "-c", "./startup_check.sh && echo 'ðŸš€ Starting MDCAN BDM 2025 Application' && exec gunicorn --config gunicorn.conf.py wsgi:application"]
