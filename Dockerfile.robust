FROM python:3.11-slim

WORKDIR /app

# Install essential system dependencies first
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev \
    gcc \
    curl \
    wget \
    fontconfig \
    libfontconfig1 \
    libfreetype6 \
    libjpeg62-turbo \
    libpng16-16 \
    libx11-6 \
    libxcb1 \
    libxext6 \
    libxrender1 \
    libssl3 \
    ca-certificates \
    xvfb \
    && rm -rf /var/lib/apt/lists/*

# Try multiple methods to install wkhtmltopdf
RUN echo "Attempting to install wkhtmltopdf..." && \
    # Method 1: Try the official GitHub release
    (wget -q https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.bullseye_amd64.deb && \
     dpkg -i wkhtmltox_0.12.6.1-2.bullseye_amd64.deb || \
     (apt-get update && apt-get install -f -y)) || \
    # Method 2: Try installing from alternative source
    (wget -q https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.bullseye_amd64.deb && \
     dpkg -i wkhtmltox_0.12.5-1.bullseye_amd64.deb || \
     (apt-get update && apt-get install -f -y)) || \
    # Method 3: Install minimal version from packages if available
    (apt-get update && apt-get install -y wkhtmltopdf) || \
    echo "wkhtmltopdf installation failed - will run without PDF generation" && \
    # Clean up
    rm -f *.deb && \
    rm -rf /var/lib/apt/lists/*

# Verify installation (but don't fail if it doesn't work)
RUN wkhtmltopdf --version && echo "‚úÖ wkhtmltopdf installed successfully" || echo "‚ö†Ô∏è wkhtmltopdf not available - PDF generation disabled"

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY . .

# Set Python environment
ENV PYTHONPATH="/app:/app/backend"
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=production

# CRITICAL: Set explicit PORT environment variable for Digital Ocean
ENV PORT=8080

# Ensure frontend build exists with proper structure
RUN mkdir -p frontend/build/static && \
    echo '<!DOCTYPE html>' > frontend/build/index.html && \
    echo '<html lang="en">' >> frontend/build/index.html && \
    echo '<head>' >> frontend/build/index.html && \
    echo '  <meta charset="utf-8">' >> frontend/build/index.html && \
    echo '  <meta name="viewport" content="width=device-width,initial-scale=1">' >> frontend/build/index.html && \
    echo '  <title>MDCAN BDM 2025 Certificate Platform</title>' >> frontend/build/index.html && \
    echo '  <style>body{font-family:Arial,sans-serif;text-align:center;padding:50px;}</style>' >> frontend/build/index.html && \
    echo '</head>' >> frontend/build/index.html && \
    echo '<body>' >> frontend/build/index.html && \
    echo '  <h1>MDCAN BDM 2025 Certificate Platform</h1>' >> frontend/build/index.html && \
    echo '  <p>Application is loading...</p>' >> frontend/build/index.html && \
    echo '  <p><a href="/admin">Admin Portal</a> | <a href="/api/health">Health Check</a></p>' >> frontend/build/index.html && \
    echo '</body>' >> frontend/build/index.html && \
    echo '</html>' >> frontend/build/index.html && \
    echo "Frontend build directory created with index.html"

# CRITICAL: Binding and health check verification
RUN echo "üîß Critical deployment configuration:" && \
    echo "  - Target binding: 0.0.0.0:8080" && \
    echo "  - PORT environment: ${PORT}" && \
    echo "  - Health check endpoint: /health" && \
    echo "  - Frontend build: $(ls -la frontend/build/ | wc -l) files" && \
    echo "‚úÖ Configuration verified"

EXPOSE 8080

# CRITICAL: Health check that matches Digital Ocean expectations with dynamic PORT
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=5 \
    CMD curl -f http://localhost:${PORT:-8080}/health || curl -f http://127.0.0.1:${PORT:-8080}/health || exit 1

# CRITICAL: Dynamic PORT binding using gunicorn config file
CMD ["sh", "-c", "echo 'üöÄ MDCAN BDM 2025 - STARTING APPLICATION' && echo 'Binding: 0.0.0.0:'${PORT:-8080} && echo 'Environment: production' && echo 'Starting gunicorn with config file...' && exec gunicorn --config gunicorn.conf.py wsgi:application"]
